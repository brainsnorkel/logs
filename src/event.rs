use crate::unit::UnitState;

#[derive(Debug, PartialEq)]
pub struct Cast {
    pub time: u64,
    pub duration: u32,
    pub channeled: bool,
    pub cast_track_id: u32,
    pub ability_id: u32,
    pub source_unit_state: UnitState,
    pub target_unit_state: UnitState,
}

#[derive(Debug, PartialEq)]
pub struct Event {
    pub time: u64,
    pub result: EventResult,
    pub damage_type: DamageType,
    pub power_type: u32,
    pub hit_value: u32,
    pub overflow: u32,
    pub cast_track_id: u32,
    pub ability_id: u32,
    pub source_unit_state: UnitState,
    pub target_unit_state: UnitState,
}

#[derive(Debug, PartialEq, Copy, Clone, Eq, Hash)]
pub enum EventResult {
    Queued,
    HotTick,
    HotTickCritical,
    PowerEnergise,
    Stunned,
    Damage,
    CriticalDamage,
    DotTick,
    DotTickCritical,
    Immune,
    Snared,
    Taunted,
    AbilityOnCooldown,
    DamageShielded,
    Sprinting,
    Heal,
    Failed,
    Knockback,
    DiedXP,
    BadTarget,
    Died,
    CriticalHeal,
    Interrupt,
    BlockedDamage,
    InsufficientResource,
    CannotUse,
    TargetOutOfRange,
    OffBalance,
    Silenced,
    Dodged,
    Staggered,
    FailedRequirements,
    CantSeeTarget,
    FallDamage,
    CasterDead,
    Intercepted,
    HealAbsorbed,
    Feared,
    TargetDead,
    SoulGemResurrectionAccepted,
    SoulGemResurrectionDeclined,
    NoLocationFound,
    TargetNotInView,
    Busy,
    Rooted,
    Falling,
    BladeTurn,
    Reflected,
    PowerDrain,
    Blocked,
    Charmed,
    Swimming,
    KillingBlow,
    Reincarnating,
    Resurrect,
    None,
}

pub fn parse_event_result(event_result: &str) -> EventResult {
    match event_result {
        "QUEUED" => EventResult::Queued,
        "HOT_TICK" => EventResult::HotTick,
        "HOT_TICK_CRITICAL" => EventResult::HotTickCritical,
        "POWER_ENERGIZE" => EventResult::PowerEnergise,
        "STUNNED" => EventResult::Stunned,
        "DAMAGE" => EventResult::Damage,
        "CRITICAL_DAMAGE" => EventResult::CriticalDamage,
        "DOT_TICK" => EventResult::DotTick,
        "DOT_TICK_CRITICAL" => EventResult::DotTickCritical,
        "IMMUNE" => EventResult::Immune,
        "SNARED" => EventResult::Snared,
        "TAUNTED" => EventResult::Taunted,
        "ABILITY_ON_COOLDOWN" => EventResult::AbilityOnCooldown,
        "DAMAGE_SHIELDED" => EventResult::DamageShielded,
        "SPRINTING" => EventResult::Sprinting,
        "HEAL" => EventResult::Heal,
        "FAILED" => EventResult::Failed,
        "KNOCKBACK" => EventResult::Knockback,
        "DIED_XP" => EventResult::DiedXP,
        "BAD_TARGET" => EventResult::BadTarget,
        "DIED" => EventResult::Died,
        "CRITICAL_HEAL" => EventResult::CriticalHeal,
        "INTERRUPT" => EventResult::Interrupt,
        "BLOCKED_DAMAGE" => EventResult::BlockedDamage,
        "INSUFFICIENT_RESOURCE" => EventResult::InsufficientResource,
        "CANNOT_USE" => EventResult::CannotUse,
        "TARGET_OUT_OF_RANGE" => EventResult::TargetOutOfRange,
        "OFFBALANCE" => EventResult::OffBalance,
        "SILENCED" => EventResult::Silenced,
        "DODGED" => EventResult::Dodged,
        "STAGGERED" => EventResult::Staggered,
        "FAILED_REQUIREMENTS" => EventResult::FailedRequirements,
        "CANT_SEE_TARGET" => EventResult::CantSeeTarget,
        "FALL_DAMAGE" => EventResult::FallDamage,
        "CASTER_DEAD" => EventResult::CasterDead,
        "INTERCEPTED" => EventResult::Intercepted,
        "HEAL_ABSORBED" => EventResult::HealAbsorbed,
        "FEARED" => EventResult::Feared,
        "TARGET_DEAD" => EventResult::TargetDead,
        "SOUL_GEM_RESURRECTION_ACCEPTED" => EventResult::SoulGemResurrectionAccepted,
        "SOUL_GEM_RESURRECTION_DECLINED" => EventResult::SoulGemResurrectionDeclined,
        "NO_LOCATION_FOUND" => EventResult::NoLocationFound,
        "TARGET_NOT_IN_VIEW" => EventResult::TargetNotInView,
        "BUSY" => EventResult::Busy,
        "ROOTED" => EventResult::Rooted,
        "FALLING" => EventResult::Falling,
        "BLADETURN" => EventResult::BladeTurn, // appeared in a cloudrest log 
        "REFLECTED" => EventResult::Reflected,
        "POWER_DRAIN" => EventResult::PowerDrain,
        "BLOCKED" => EventResult::Blocked,
        "CHARMED" => EventResult::Charmed,
        "SWIMMING" => EventResult::Swimming,
        "KILLING_BLOW" => EventResult::KillingBlow,
        "REINCARNATING" => EventResult::Reincarnating,
        "RESURRECT" => EventResult::Resurrect,
        _ => EventResult::None,
    }
}

pub fn does_damage(event_result: EventResult) -> bool {
    match event_result {
        EventResult::Damage => true,
        EventResult::BlockedDamage => true,
        EventResult::CriticalDamage => true,
        EventResult::DotTick => true,
        EventResult::DotTickCritical => true,
        _ => false,
    }
}

pub fn does_heal(event_result: EventResult) -> bool {
    match event_result {
        EventResult::Heal => true,
        EventResult::HotTick => true,
        EventResult::HotTickCritical => true,
        EventResult::CriticalHeal => true,
        _ => false,
    }
}

#[derive(Debug, PartialEq)]
pub enum DamageType {
    Fire,
    Physical,
    Cold,
    Shock,
    Poison,
    Magic,
    Generic,
    Disease,
    Bleed,
    Oblivion,
    None,
}

pub fn parse_damage_type(damage_type: &str) -> DamageType {
    match damage_type {
        "FIRE" => DamageType::Fire,
        "PHYSICAL" => DamageType::Physical,
        "COLD" => DamageType::Cold,
        "SHOCK" => DamageType::Shock,
        "POISON" => DamageType::Poison,
        "MAGIC" => DamageType::Magic,
        "GENERIC" => DamageType::Generic,
        "BLEED" => DamageType::Bleed,
        "DISEASE" => DamageType::Disease,
        "OBLIVION" => DamageType::Oblivion,
        _ => DamageType::None,
    }
}